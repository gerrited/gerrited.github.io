<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Gerrit</title><link>https://gerrit.codes/posts/</link><description>Recent content in Posts on Gerrit</description><generator>Hugo -- gohugo.io</generator><language>de-de</language><copyright>&lt;a href="https://creativecommons.org/licenses/by/4.0/" target="_blank" rel="noopener">CC BY 4.0&lt;/a></copyright><lastBuildDate>Sat, 12 Feb 2022 11:02:32 +0100</lastBuildDate><atom:link href="https://gerrit.codes/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Unit-Tests für IoC Container</title><link>https://gerrit.codes/posts/2022/02/unit-tests-f%C3%BCr-ioc-container/</link><pubDate>Sat, 12 Feb 2022 11:02:32 +0100</pubDate><guid>https://gerrit.codes/posts/2022/02/unit-tests-f%C3%BCr-ioc-container/</guid><description>Wenn für eine Anwendung Dependency Injection (DI) genutzt wird und ein Inversion of Control (IoC) Container wie Autofac zum Einsatz kommt, kann es schnell passieren, dass nicht alle benötigten Komponenten registriert werden. Während der Entwicklung fällt das meistens nicht auf, aber sobald die Anwendung gestartet und genutzt wird, kommt es zu Fehlermeldungen, die oft zum Absturz der Anwendung führen.
Unhandled exception. Autofac.Core.Registration.ComponentNotRegisteredException: The requested service &amp;#39;ConsoleApp.Interfaces.ITextWriter&amp;#39; has not been registered.</description><content type="html"><![CDATA[
























<img
  
  
  sizes="(min-width: 35em) 720px, 100vw"
  srcset='
  
    /img/006-title_hu747ba16aad885dc8ae1305e9a8d11301_514828_500x0_resize_box_3.png 500w
  
  
    , /img/006-title_hu747ba16aad885dc8ae1305e9a8d11301_514828_800x0_resize_box_3.png 800w
  
  
    , /img/006-title_hu747ba16aad885dc8ae1305e9a8d11301_514828_1200x0_resize_box_3.png 1200w
  '
  
    src="/img/006-title.png"
  
  alt="">


<p>Wenn für eine Anwendung <a href="https://martinfowler.com/articles/injection.html">Dependency Injection</a> (DI) genutzt wird und ein Inversion of Control (IoC) Container wie Autofac zum Einsatz kommt, kann es schnell passieren, dass nicht alle benötigten Komponenten registriert werden. Während der Entwicklung fällt das meistens nicht auf, aber sobald die Anwendung gestartet und genutzt wird, kommt es zu Fehlermeldungen, die oft zum Absturz der Anwendung führen.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-plaintext" data-lang="plaintext"><span style="display:flex;"><span>Unhandled exception. Autofac.Core.Registration.ComponentNotRegisteredException: 
</span></span><span style="display:flex;"><span> The requested service &#39;ConsoleApp.Interfaces.ITextWriter&#39; has not been registered.
</span></span><span style="display:flex;"><span> To avoid this exception, either register a component to provide the service, check 
</span></span><span style="display:flex;"><span> for service registration using IsRegistered(), or use the ResolveOptional() method 
</span></span><span style="display:flex;"><span> to resolve an optional dependency.
</span></span><span style="display:flex;"><span>   at Autofac.ResolutionExtensions.ResolveService(IComponentContext context, Service service, IEnumerable`1 parameters)
</span></span><span style="display:flex;"><span>   at Autofac.ResolutionExtensions.Resolve(IComponentContext context, Type serviceType, IEnumerable`1 parameters)
</span></span><span style="display:flex;"><span>   at Autofac.ResolutionExtensions.Resolve[TService](IComponentContext context, IEnumerable`1 parameters)
</span></span><span style="display:flex;"><span>   at Autofac.ResolutionExtensions.Resolve[TService](IComponentContext context)
</span></span><span style="display:flex;"><span>   at Program.&lt;Main&gt;$(String[] args) in /Users/gerrit/Code/IocTests/src/ConsoleApp/Program.cs:line 7</span></span></code></pre></div>
<p>Um möglichst schnell auf das Problem aufmerksam zu werden, sollte die IoC Konfiguration unter Test gestellt werden. In diesem Blogpost beziehe ich mich auf die Möglichkeiten von <a href="https://autofac.org/">Autofac</a>, aber auch andere Packages wie <a href="https://docs.microsoft.com/en-us/dotnet/core/extensions/dependency-injection">Microsoft.Extensions.DependencyInjection</a> bieten ähnliche Funktionalitäten.</p>
<p>Eine Beispielanwendung inkl. Tests gibt es im Repo <a href="https://github.com/gerrited/IocTests">gerrited/IocTests</a>. Neben Autofac werden auch die Pakete <a href="https://nunit.org/">NUnit</a>, <a href="https://github.com/moq/moq4">Moq</a> und <a href="https://fluentassertions.com/">FluentAssertions</a> genutzt.</p>
<h2 id="ioc-konfiguration-testen">IoC Konfiguration testen</h2>
<p>Angenommen beim Programmstart soll das Interface <code>ITextWriter</code> aufgelöst werden und die registrierte Implementierung <code>ConsoleTextWriter</code> hat weitere Abhängigkeiten (in diesem Fall <code>ITextGenerator</code>), die wiederum auch am IoC Container registriert sein müssen.</p>

























<img
  
  
  sizes="(min-width: 35em) 720px, 100vw"
  srcset='
  
    /img/006-dependency-injection_hu05c3ebafe3cd11006d58e8f68786fbbe_55515_500x0_resize_box_3.png 500w
  
  
    , /img/006-dependency-injection_hu05c3ebafe3cd11006d58e8f68786fbbe_55515_800x0_resize_box_3.png 800w
  
  '
  
    src="/img/006-dependency-injection.png"
  
  alt="">


<p>In der <code>Program.cs</code> sieht es dann beispielsweise wie folgt aus.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> iocConfig = <span style="color:#66d9ef">new</span> IocConfig();
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> builder = iocConfig.GetBuilder();
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> container = builder.Build();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> writer = container.Resolve&lt;ITextWriter&gt;();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>writer.Write();</span></span></code></pre></div>
<p>Ein einfacher Test könnte genau diese Schritte durchführen und sicherstellen, dass es nicht zur Exception <code>ComponentNotRegisteredException</code> kommt.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Resolve_ITextWriter_NotThrowComponentNotRegisteredException()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> sut = CreateContainer();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> act = () =&gt; sut.Resolve&lt;ITextWriter&gt;();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    act.Should().NotThrow&lt;ComponentNotRegisteredException&gt;();
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div>
<p>Die Erzeugung des Containers im &ldquo;Arrange&rdquo; (siehe <a href="https://blog.ploeh.dk/2013/06/24/a-heuristic-for-formatting-code-according-to-the-aaa-pattern/">AAA Pattern</a>) findet in einer Factory Method statt, weil wir diesen Teil noch bei weiteren Tests brauchen werden. Anschließend wird im &ldquo;Act&rdquo;, vergleichbar mit der Stelle beim Programmstart, das Interface <code>ITextWriter</code> aufgelöst. Im &ldquo;Assert&rdquo; stellen wir sicher, dass die Exception <code>ComponentNotRegisteredException</code> nicht geworfen wird. Mit diesem Test können wir bereits recht sicher sein, dass die Anwendung lauffähig ist.</p>
<p><a href="https://blog.cleancoder.com/uncle-bob/2017/12/18/Excuses.html">Unit Testing ist oft doppelte Büchführung</a>. Um sowohl die erfolgreiche Auflösung, als auch die Registrierung ansich zu prüfen, kann alternativ oder zusätzlich der folgende Test genutzt werden.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#a6e22e">[Test]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Resolve_ITextWriter_ReturnConsoleTextWriter()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> sut = CreateContainer();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> result = sut.Resolve&lt;ITextWriter&gt;();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    result.Should().BeOfType&lt;ConsoleTextWriter&gt;();
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div>
<p>Statt auf die Exception, welche trotzdem geworfen wird, wenn <code>ITextWriter</code> oder eine Abhängigkeit nicht aufgelöst werden kann, zu prüfen, testen wir, ob es sich bei der aufgelösten Klasse, um den richtigen Type handelt. Dieser Test schlägt also auch fehl, wenn z.B. der Typ <code>FileTextWriter</code> statt <code>ConsoleTextWriter</code> registriert und dadurch aufgelöst wurde.</p>
<h2 id="umgang-mit-externen-ressourcen">Umgang mit externen Ressourcen</h2>
<p>Wenn externe Ressourcen wie Netzwerk, Datenbankverbindungen oder Filesystem genutzt werden, kann der Test der IoC Konfiguration etwas schwieriger werden, weil während des Tests die Datenbank nicht vorhanden oder der hinterlegte Server nicht erreichbar ist. Dann können simple <a href="https://martinfowler.com/bliki/TestDouble.html">Test Doubles</a> die eigentlichen Implementierungen ersetzen. Dafür werden zusätzlich zu den tatsächlichen Registrierungen, weitere für die jeweiligen Interfaces (z.B. <code>IDatabaseConnection</code> oder <code>IFileSystem</code>) durchgeführt. Damit sichergestellt werden kann, dass es die Typen auch ohne die Test Doubles aufgelöst werden können, sollten weitere Tests verwendet werden.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#a6e22e">[Test]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> IsRegistered_IDatabaseConnection()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> sut = CreateContainer();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> result = sut.IsRegistered&lt;IDatabaseConnection&gt;();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    result.Should().BeTrue();
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div>
<p>Durch <code>IsRegistered</code> wird der Typ nicht aufgelöst und es werden keine externen Ressourcen wie Datenbankverbindungen erstellt, was zu Fehlern wie &ldquo;Anmeldung fehlgeschlagen&rdquo; oder &ldquo;Server nicht gefunden&rdquo; führen könnte. Solche Tests sollten trotzdem vermieden werden, weil jetzt nicht sichergestellt werden kann, ob alle Anhängigkeiten der registrierten Implementierung von <code>IDatabaseConnection</code> aufgelöst werden können.</p>
<h2 id="sind-das-unit-tests">Sind das Unit-Tests?</h2>
<p>Ob es sich hierbei um Unit- oder Integrationstests handelt, ist (wie so häufig) abhängig von der individuellen Perspektive und Motivation. Getestet wird eine Komponente &ldquo;IoC Konfiguration&rdquo;. Außerdem können die Tests schnell und ohne weitere Konfiguration ausgeführt werden. Andererseits werden Abhängigkeiten der Implementierungen aufgelöst, wodurch ganz eindeutig mehrere Klassen und Projekte am Test beteiligt sind. Ich persönlich bevorzuge grundsätzlich eine Aufteilung der Tests in Unit (eher schnell und ohne Konfiguration) und Integration (eher langsam, evtl. ist eine Konfiguration nötig oder es wird auf externe Ressourcen wie Dateien und Datenbanken zugegriffen), wobei der Grenze bewusst unscharf bleibt.</p>
<h2 id="probleme">Probleme</h2>
<p>Die Tests werden deutlich schwieriger, wenn es keinen eindeutigen Einstiegspunkt, individuelle Lifetimescopes (z.B. pro API Request) oder weitere Möglichkeiten zum Auflösen von Abhängigkeiten (z.B. versteckte Service Locater mit einer anderen IoC Konfiguration) gibt. Auf solche Komplexitätsverstärker versuche ich aber sowieso möglichst zu verzichten.</p>
<p>Außerdem wird die Aussagekraft von Tests verringert, wenn viele Registrierungen aufgrund von externen Ressourcen durch Test Doubles ersetzt werden müssen, weil die wirklichen Abhängigkeiten dann erst zur Laufzeit aufgelöst werden. Deshalb sollte sich die Anzahl der zusätzlich registrierten Test Doubles auf ein Minimum beschränken.</p>
<h2 id="fazit">Fazit</h2>
<p>Anders als <a href="https://twitter.com/ploeh">Mark Seemann</a>, dessen neues Buch &ldquo;Code That Fits in Your Head&rdquo; ich aktuell jedem empfehle kann, in seinem Blogpost <a href="https://blog.ploeh.dk/2011/12/21/TestingContainerConfigurations/">&ldquo;Testing Container Configurations&rdquo;</a>, bin ich der Meinung, dass die aufgeführten Tests, vor allem bei größeren Anwendungen, bei denen Abhängigkeiten oft undurchsichtig werden, die Entwicklung erleichtern können, weil der Feedback Loop deutlich kürzer wird, denn die Tests sollten spätestens nach jedem Commit von der CI/CD Pipeline ausgeführt werden. Meistens reichen bereits wenige Testfälle aus, um recht zuverlässig testen zu können, dass es während der Laufzeit keine Probleme beim Auflösen der Abhängigkeiten geben wird. Auf System- oder Smoke-Tests sollte trotzdem nicht verzichtet werden. Ein Nachteil ist, dass die Tests für jede Anwendung erneut geschrieben werden müssen. Das sollte aber bestenfalls einer der ersten Schritte sein, wenn nach TDD gearbeitet wird.</p>
<p>Auf das Testen einzelner <a href="https://autofac.readthedocs.io/en/latest/configuration/modules.html">Module</a>, welche beispielsweise für Zusammenstellungen der einzelnen Komponenten eines Pakets genutzt werden, sollte verzichtet werden, weil die Komposition der Abhängigkeiten erst in der IoC Konfiguration der Anwendung festgelegt wird und es dadurch normal ist, dass nicht alle Abhängigkeiten eines einzelnen Moduls aufgelöst werden können.</p>
]]></content></item><item><title>Lokales K8s im Internet verfügbar</title><link>https://gerrit.codes/posts/2022/01/lokales-k8s-im-internet-verf%C3%BCgbar/</link><pubDate>Sun, 30 Jan 2022 15:24:11 +0100</pubDate><guid>https://gerrit.codes/posts/2022/01/lokales-k8s-im-internet-verf%C3%BCgbar/</guid><description>Vorbereitungen Cloudflare bietet seit 2021 (siehe A Boring Announcement: Free Tunnels for Everyone) kostenlose Tunnels an. Damit können lokale Websites im Internet verfügbar gemacht werden. Benötigt wird nur eine Domain, bei der Cloudflare als Nameserver hinterlegt ist. Wie das genau geht, ist unter &amp;ldquo;Set up your first tunnel&amp;rdquo; beschrieben.
Tunnel für Services im Kubernetes Cluster Erstellte Tunnel können auch für Services in einem Kubernetes Cluster genutzt werden. Eine Anleitung mit Beispiel gibt es in meinem Fork von cloudflare/argo-tunnel-examples.</description><content type="html"><![CDATA[
























<img
  
  
  sizes="(min-width: 35em) 720px, 100vw"
  srcset='
  
    /img/k3s-cloudflared_hube56a73c1754b9451fc639bfac136570_121211_500x0_resize_box_3.png 500w
  
  
    , /img/k3s-cloudflared_hube56a73c1754b9451fc639bfac136570_121211_800x0_resize_box_3.png 800w
  
  
    , /img/k3s-cloudflared_hube56a73c1754b9451fc639bfac136570_121211_1200x0_resize_box_3.png 1200w
  '
  
    src="/img/k3s-cloudflared.png"
  
  alt="">


<h2 id="vorbereitungen">Vorbereitungen</h2>
<p>Cloudflare bietet seit 2021 (siehe <a href="https://blog.cloudflare.com/tunnel-for-everyone/">A Boring Announcement: Free Tunnels for Everyone</a>) kostenlose Tunnels an. Damit können lokale Websites im Internet verfügbar gemacht werden. Benötigt wird nur eine Domain, bei der Cloudflare als Nameserver hinterlegt ist. Wie das genau geht, ist unter <a href="https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/install-and-setup/tunnel-guide">&ldquo;Set up your first tunnel&rdquo;</a> beschrieben.</p>
<h2 id="tunnel-für-services-im-kubernetes-cluster">Tunnel für Services im Kubernetes Cluster</h2>
<p>Erstellte Tunnel können auch für Services in einem Kubernetes Cluster genutzt werden. Eine Anleitung mit Beispiel gibt es in <a href="https://github.com/gerrited/argo-tunnel-examples/tree/master/named-tunnel-k8s">meinem Fork von cloudflare/argo-tunnel-examples</a>. Im dortigen Kubernetes Manifest <a href="https://github.com/gerrited/argo-tunnel-examples/blob/master/named-tunnel-k8s/cloudflared.yaml">&ldquo;cloudflared.yml&rdquo;</a> habe ich, im Vergleich zum Original, das Container Image von <a href="https://hub.docker.com/r/cloudflare/cloudflared/tags">cloudflare/cloudflared</a> auf <a href="https://hub.docker.com/r/erisamoe/cloudflared/tags">erisamoe/cloudflared</a> geändert, damit das Deployment auch auf arm64 (also z.B. auf einem Raspberry Pi und somit auch im <a href="/posts/2022/01/raspberry-pi-cluster-mit-k3s/">Raspberry Pi Kubernetes Cluster</a>) und nicht nur auf amd64 funktioniert.</p>
<p>Nachdem das Deployment angepasst und erfolgreich durchgeführt wurde, ist der Service unter der gewählten Domain erreichbar und die Last wird automatisch auf alle Pods des Services verteilt. Da Cloudflare als TLS termination proxy genutzt wird, ist auch https möglich. Dadurch kann der Traffic bei Cloudflare natürlich unverschlüsselt gelesen werden. Entsprechend ist diese Lösung nicht oder nur bedingt für produktive Umgebung geeignet.</p>
<h2 id="alternativen">Alternativen</h2>
<p>Auch <a href="https://inlets.dev/">inlets</a> von <a href="https://www.alexellis.io/">Alex Ellis</a> kann als Tunnel genutzt werden. Angefangen mit einer kostenlosen Option, hat Inlets 2021 in einem <a href="https://inlets.dev/blog/2021/07/27/monthly-subscription.html">Blogpost</a> bekanntgegeben, dass sie jetzt eine monatliche Subscription anbieten. Das Projekt sollte man sich auf jeden Fall genauer anschauen, wenn auf Cloudflare verzichtet werden soll.</p>
]]></content></item><item><title>Bloggen mit Hugo und GitHub Pages</title><link>https://gerrit.codes/posts/2022/01/bloggen-mit-hugo-und-github-pages/</link><pubDate>Sat, 15 Jan 2022 22:02:31 +0100</pubDate><guid>https://gerrit.codes/posts/2022/01/bloggen-mit-hugo-und-github-pages/</guid><description>Plattform Eigentlich habe ich mich recht schnell für Hugo als Framework für das neue Blog entschieden. Davor hatte ich damit keinen Kontakt, aber Dokumentation und Community machten einen guten Eindruck auf mich. Außerdem waren andere Blogs und Websites, die auf Hugo basierte, simple, schnell und modern.
Theme Das Theme hello-friend-ng habe ich (einfach und etwas langweilig) unter den Themes auf der offiziellen Hugo Website gefunden. Der Entwickler Djordje Atlialp nutzt es selbst für seinen Blog und ich bin bisher zufrieden mit dem Look und den integrierten Funktionen.</description><content type="html"><![CDATA[<h2 id="plattform">Plattform</h2>

























<img
  
  
  sizes="(min-width: 35em) 720px, 100vw"
  srcset='
  
    /img/hugo-website_huf138cfa89d09395479777d48afb1e9f0_326811_500x0_resize_box_3.png 500w
  
  
    , /img/hugo-website_huf138cfa89d09395479777d48afb1e9f0_326811_800x0_resize_box_3.png 800w
  
  
    , /img/hugo-website_huf138cfa89d09395479777d48afb1e9f0_326811_1200x0_resize_box_3.png 1200w
  '
  
    src="/img/hugo-website.png"
  
  alt="">


<p>Eigentlich habe ich mich recht schnell für <a href="https://gohugo.io/" title="Hugo">Hugo</a> als Framework für das neue Blog entschieden. Davor hatte ich damit keinen Kontakt, aber Dokumentation und Community machten einen guten Eindruck auf mich. Außerdem waren andere Blogs und Websites, die auf Hugo basierte, simple, schnell und modern.</p>
<h2 id="theme">Theme</h2>
<p>Das Theme <a href="https://themes.gohugo.io/themes/hugo-theme-hello-friend-ng/" title="Hugo Theme hello-friend-ng">hello-friend-ng</a> habe ich (einfach und etwas langweilig) unter den Themes auf der <a href="https://themes.gohugo.io/">offiziellen Hugo Website</a> gefunden. Der Entwickler <a href="https://github.com/rhazdon">Djordje Atlialp</a> nutzt es selbst für seinen Blog und ich bin bisher zufrieden mit dem Look und den integrierten Funktionen.</p>
<h2 id="erweiterungen">Erweiterungen</h2>
<p>Zusätzlich zu den Grundfunktionen des Themes, nutze ich noch <a href="https://github.com/mfg92/hugo-shortcode-gallery">hugo-shortcode-gallery</a> für Fotogallerien (z.B. im Blog Post über das <a href="/posts/2022/01/raspberry-pi-cluster-mit-k3s/">Raspberry Pi Kubernetes Cluster</a>) und <a href="https://github.com/martignoni/hugo-notice">hugo-notice</a>, falls ich optisch auffallende Anmerkungen einfügen will.</p>
<p>Bei <code>hugo-shortcode-gallery</code> hat das Einrichten allerdings fast 2 Stunden gedauert, weil die Erweiterung jQuery voraussetzt, aber das Theme <code>hello-friend-ng</code> ohne auskommt. Letztendlich bin ich erst durch ein <a href="https://github.com/mfg92/hugo-shortcode-gallery/issues/32">Issue bei GitHub</a> auf die Option <code>loadJQuery</code> aufmerksam gemacht worden. Nur so als Tipp, falls ihr die Kombination aus dem Theme und der Erweiterung auch nutzen wollt. ;)</p>
<h2 id="hosting">Hosting</h2>

























<img
  
  
  sizes="(min-width: 35em) 720px, 100vw"
  srcset='
  
    /img/github.io-commits_hu8e2bfd563793b7fe31a15998c2fdbeef_980871_500x0_resize_box_3.png 500w
  
  
    , /img/github.io-commits_hu8e2bfd563793b7fe31a15998c2fdbeef_980871_800x0_resize_box_3.png 800w
  
  
    , /img/github.io-commits_hu8e2bfd563793b7fe31a15998c2fdbeef_980871_1200x0_resize_box_3.png 1200w
  '
  
    src="/img/github.io-commits.png"
  
  alt="">


<p>Das Blog wird bei GitHub Pages (<a href="https://github.com/gerrited/gerrited.github.io">Repo</a>) gehostet. Allerdings liegen die eigentlichen Quelldateien (Markdown, Bilder, Konfiguration, etc.) in einem anderen, privaten Repository, damit Entwürfe, Konfiguration und die Originalfotos (inkl. EXIF-Daten) nicht öffentlich sind. Ich habe mich bei der Einrichtung an dieser <a href="https://ruddra.com/hugo-deploy-static-page-using-github-actions/">Anleitung</a> orientiert.</p>
<h2 id="status">Status</h2>
<p>Auf der separaten <a href="https://status.g11s.cc">Status Page</a> wird die Erreichbarkeit und Geschwindigkeit des Blogs regelmäßig durch <a href="https://github.com/upptime/upptime">upptime</a> geprüft. Dafür habe ich einfach ein eigenes <a href="https://github.com/gerrited/upptime">Repo</a> anhand des upptime Templates erstellt. Weiteres ist in dem <a href="https://upptime.js.org/docs/get-started/">Getting started</a> beschrieben. Außerdem habe ich für die Status Badges einen kleinen Shortcode geschrieben.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">style</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;display: flex&#34;</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">style</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;margin-right:0.5em&#34;</span>&gt;&lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://g11s.cc/upptime/history/blog&#34;</span>&gt;&lt;<span style="color:#f92672">img</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fgerrited%2Fupptime%2Fmaster%2Fapi%2Fblog%2Fuptime.json&#34;</span> /&gt;&lt;/<span style="color:#f92672">a</span>&gt;&lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">div</span>&gt;&lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://g11s.cc/upptime/history/blog&#34;</span>&gt;&lt;<span style="color:#f92672">img</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fgerrited%2Fupptime%2Fmaster%2Fapi%2Fblog%2Fresponse-time.json&#34;</span> /&gt;&lt;/<span style="color:#f92672">a</span>&gt;&lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">div</span>&gt;
</span></span></code></pre></div><p><strong>Demo</strong>
<div style="display: flex">
    <div style="margin-right:0.5em"><a href="https://status.g11s.cc/history/blog"><img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fgerrited%2Fupptime%2Fmaster%2Fapi%2Fblog%2Fuptime.json" /></a></div>
    <div><a href="https://status.g11s.cc/history/blog"><img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fgerrited%2Fupptime%2Fmaster%2Fapi%2Fblog%2Fresponse-time.json" /></a></div>
</div></p>
<p>Die Verweise in den Links und Bildern sind hartkodiert und müssten ausgetaucht werden, solltet ihr den Shortcode für eure Website nutzen wollen. Wenn der Code unter /layouts/shortcodes/upptime.html gespeichert wird, kann er folgendermaßen in Markdown eingefügt werden.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-markdown" data-lang="markdown"><span style="display:flex;"><span>{{&lt; <span style="color:#f92672">upptime</span> &gt;}}
</span></span></code></pre></div><h2 id="ablauf">Ablauf</h2>
<p>Meistens teste die die Änderungen lokal (via <code>hugo server -D</code>) und pushe sie erst, wenn ich mit dem Ergebnis zufrieden bin. Danach wird die öffentliche Website innerhalb weniger Sekunden durch die konfigurierte GitHub Action aktualisiert.</p>
<p>Von unterwegs können kleinere Anpassungen auch über die GitHub Weboberfläche vorgenommen werden. Allerdings ist der Editor dafür nur mittelmäßig geeignet und es gibt keine Vorschau der Änderungen.</p>
<h2 id="fazit">Fazit</h2>
<p>Aktuell bin ich recht zufrieden mit dem Stack und Ablauf. Einiges ist etwas fummeliger als beim einem größeren System wie z.B. Wordpress, mit dem ich seit über 10 Jahren regelmäßig arbeite. Aber genau wegen des anderen Ansatzes, der Leichtgewichtigkeit und ein wenig Extraarbeit, habe ich mich auf die Suche nach einer anderen Lösung gemacht. Und vermutlich gehen die meisten Sachen in ein paar Wochen deutlich leichter von der Hand.</p>
]]></content></item><item><title>K8s Deployment visualisieren</title><link>https://gerrit.codes/posts/2022/01/k8s-deployment-visualisieren/</link><pubDate>Mon, 10 Jan 2022 07:24:32 +0100</pubDate><guid>https://gerrit.codes/posts/2022/01/k8s-deployment-visualisieren/</guid><description>Intro Um Deployments eines Kubernetes Clusters zu visualisieren, habe ich mir Pimoroni Blinkt LED Strips gekauft und sie auf die GPIO-Slots der RPi des Clusters gesteckt.
Demo Note
Manchmal wird das Video nicht geladen oder es wird stattdessen die Meldung &amp;ldquo;Diese Live-Veranstaltung ist nicht mehr verfügbar.&amp;rdquo; angezeigt. Oft hilft dann ein Reload.
Details Durch blinkt-controller wird ein Daemonset erstellt, welches auf die Labels blinkt und blinktColor von Pods reagiert. Damit die LEDs angesteuert werden können, laufen die Pods als cluster-admin.</description><content type="html"><![CDATA[<h2 id="intro">Intro</h2>
<p>Um Deployments eines Kubernetes Clusters zu visualisieren, habe ich mir <a href="https://learn.pimoroni.com/article/getting-started-with-blinkt">Pimoroni Blinkt</a> LED Strips gekauft und sie auf die GPIO-Slots der RPi des Clusters gesteckt.</p>
<h2 id="demo">Demo</h2>
<style type="text/css">.notice{padding:18px;line-height:24px;margin-bottom:24px;border-radius:4px;color:#444;background:#e7f2fa}.notice p:last-child{margin-bottom:0}.notice-title{margin:-18px -18px 12px;padding:4px 18px;border-radius:4px 4px 0 0;font-weight:700;color:#fff;background:#6ab0de}.notice.warning .notice-title{background:rgba(217,83,79,.9)}.notice.warning{background:#fae2e2}.notice.info .notice-title{background:#f0b37e}.notice.info{background:#fff2db}.notice.note .notice-title{background:#6ab0de}.notice.note{background:#e7f2fA}.notice.tip .notice-title{background:rgba(92,184,92,.8)}.notice.tip{background:#e6f9e6}.icon-notice{display:inline-flex;align-self:center;margin-right:8px}.icon-notice img,.icon-notice svg{height:1em;width:1em;fill:currentColor}.icon-notice img,.icon-notice.baseline svg{top:0.125em;position:relative}</style>
<div><svg width="0" height="0" display="none" xmlns="http://www.w3.org/2000/svg"><symbol id="tip-notice" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet"><path d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"/></symbol><symbol id="note-notice" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet"><path d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/></symbol><symbol id="warning-notice" viewBox="0 0 576 512" preserveAspectRatio="xMidYMid meet"><path d="M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/></symbol><symbol id="info-notice" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet"><path d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"/></symbol></svg></div><div class="notice note" >
<p class="first notice-title"><span class="icon-notice baseline"><svg><use href="#note-notice"></use></svg></span>Note</p><p>Manchmal wird das Video nicht geladen oder es wird stattdessen die Meldung &ldquo;Diese Live-Veranstaltung ist nicht mehr verfügbar.&rdquo; angezeigt. Oft hilft dann ein Reload.</p></div>


<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube-nocookie.com/embed/U6AsAn490-4" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<h2 id="details">Details</h2>
<p>Durch <a href="https://github.com/gerrited/blinkt-k8s-controller">blinkt-controller</a> wird ein <a href="https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/">Daemonset</a> erstellt, welches auf die Labels <code>blinkt</code> und <code>blinktColor</code> von Pods reagiert. Damit die LEDs angesteuert werden können, laufen die Pods als cluster-admin. Weiteres unter <a href="https://github.com/gerrited/blinkt-k8s-controller#how-it-works">&ldquo;How it works&rdquo;</a> auf GitHub.</p>
<h2 id="vorbereitung">Vorbereitung</h2>
<p>In dem Video ist der Controller bereits eingerichtet. Zusätzlich verwende ich diese beiden Manifests:</p>
<script type="application/javascript" src="https://gist.github.com/gerrited/c9691d8dc4be346038c5f4908a9a2adf.js"></script>

<h2 id="ablauf">Ablauf</h2>
<h3 id="deploy">Deploy</h3>
<p>Zuerst wird das Deployment &ldquo;green&rdquo; durchgeführt. Dadurch werden die 16 grünen Pods gleichmäßig auf die 4 Nodes verteilt.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl apply -f hello-blinkt-controller-green.yml</span></span></code></pre></div>
<p>Der Vorgang des Deployments kann jedes Mal mit folgenden Befehl beobachtet werden.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl rollout status deployment/hello-blinkt</span></span></code></pre></div>
<h3 id="update">Update</h3>
<p>Sobald das Deployment erfolgreich war, wird das Deployment auf &ldquo;blue&rdquo; geändert. Kubernetes prüft dann erstmal vorsichtig, ob das Deployment in Ordnung ist. In dieser Übergangsphase sind sowohl grüne als auch blaue Pods aktiv. Wenn die neue Version des Deployments erfolgreich geprüft wurde, ersetzen weitere blaue Pods die alten grünen Pods.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl apply -f hello-blinkt-controller-blue.yml</span></span></code></pre></div>
<h3 id="delete">Delete</h3>
<p>Anschließend wird das Deployment gelöscht. Auch hier geht K8s schrittweise vor und entfernt nacheinander die einzelnen Pods.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl delete -f hello-blinkt-controller-blue.yml</span></span></code></pre></div>
<h2 id="fazit">Fazit</h2>
<p>Durch die LEDs und die unterschiedlichen Farben, ist der Vorgang meiner Meinung nach deutlich greifbarer, als z.B. in Lens und damit gerade für kleine Kubernetes 101 Sessions geeignet.</p>
]]></content></item><item><title>Raspberry Pi Cluster mit k3s</title><link>https://gerrit.codes/posts/2022/01/raspberry-pi-cluster-mit-k3s/</link><pubDate>Sat, 08 Jan 2022 18:37:38 +0100</pubDate><guid>https://gerrit.codes/posts/2022/01/raspberry-pi-cluster-mit-k3s/</guid><description>Um mich auf einer Art Spielwiese mit Kubernetes auseinandersetzen zu können, habe ich Anfang 2020 folgendes bestellt:
4 x Raspberry Pi 4 B (4x 1,5 GHz, 2 GB RAM) 4 x SanDisk Ultra MicroSDHC 32GB RPI CASE TR 19 (transparentes Gehäuse für mehrere Raspberry Pi) TP-Link 5-Port Gigabit Switch Anker USB-Ladegerät PowerPort+, 5 V, 2400 mA, 5 USB-Ports diverse USB und LAN Kabel Weitere Produktinformationen können bei den üblichen Shops gefunden werden.</description><content type="html"><![CDATA[<p>Um mich auf einer Art Spielwiese mit Kubernetes auseinandersetzen zu können, habe ich Anfang 2020 folgendes bestellt:</p>
<ul>
<li>4 x Raspberry Pi 4 B (4x 1,5 GHz, 2 GB RAM)</li>
<li>4 x  SanDisk Ultra MicroSDHC 32GB</li>
<li>RPI CASE TR 19 (transparentes Gehäuse für mehrere Raspberry Pi)</li>
<li>TP-Link 5-Port Gigabit Switch</li>
<li>Anker USB-Ladegerät PowerPort+, 5 V, 2400 mA, 5 USB-Ports</li>
<li>diverse USB und LAN Kabel</li>
</ul>
<p>Weitere Produktinformationen können bei den üblichen Shops gefunden werden. Der Gesamtpreis belief sich auf ca. 300€.</p>




	


































  	
	

	
		<script src="/shortcode-gallery/jquery-3.6.0.min.js"></script>
	
	
	

	<script src="/shortcode-gallery/swipebox/js/jquery.swipebox.min.js"></script>
	<link rel="stylesheet" href="/shortcode-gallery/swipebox/css/swipebox.min.css">

	<script src="/shortcode-gallery/justified_gallery/jquery.justifiedGallery.min.js"></script>
	<link rel="stylesheet" href="/shortcode-gallery/justified_gallery/justifiedGallery.min.css"/>


<style>
	

	
</style>





<div id="gallery-53019b3d45843050236ea504dabe72df-0-wrapper" class="gallery-wrapper">
<div id="gallery-53019b3d45843050236ea504dabe72df-0" class="justified-gallery">
	
		
		
				
			
			
			
				
			

			
			
				
			


			
			
			

			
			


			<div>
				
				
					
				
				<a href="/posts/2022/01/raspberry-pi-cluster-mit-k3s/raspberry-pi-001.jpg" 
					class="galleryImg"
					
					>
					<img			
						width="600" height="450"

						
							src="/posts/2022/01/raspberry-pi-cluster-mit-k3s/raspberry-pi-001_hud16d612c330b04dcdb106e49d4a31f27_597464_600x600_fit_q90_lanczos.jpg"
						

						
					>
				</a>
			</div>
		
	
		
		
				
			
			
			
				
			

			
			
				
			


			
			
			

			
			


			<div>
				
				
					
				
				<a href="/posts/2022/01/raspberry-pi-cluster-mit-k3s/raspberry-pi-002.jpg" 
					class="galleryImg"
					
					>
					<img			
						width="600" height="450"

						
							src="/posts/2022/01/raspberry-pi-cluster-mit-k3s/raspberry-pi-002_hu5ac38d9ac6a6b34ee8299118fdb62090_543435_600x600_fit_q90_lanczos.jpg"
						

						
					>
				</a>
			</div>
		
	
		
		
				
			
			
			
				
			

			
			
				
			


			
			
			

			
			


			<div>
				
				
					
				
				<a href="/posts/2022/01/raspberry-pi-cluster-mit-k3s/raspberry-pi-003.jpg" 
					class="galleryImg"
					
					>
					<img			
						width="450" height="600"

						
							src="/posts/2022/01/raspberry-pi-cluster-mit-k3s/raspberry-pi-003_hua080a8dbf0a1f20d00daec3557c205a9_525255_600x600_fit_q90_lanczos.jpg"
						

						
					>
				</a>
			</div>
		
	
		
		
				
			
			
			
				
			

			
			
				
			


			
			
			

			
			


			<div>
				
				
					
				
				<a href="/posts/2022/01/raspberry-pi-cluster-mit-k3s/raspberry-pi-004.jpg" 
					class="galleryImg"
					
					>
					<img			
						width="450" height="600"

						
							src="/posts/2022/01/raspberry-pi-cluster-mit-k3s/raspberry-pi-004_huda82d5597805dd095113ffbad5b0b7bf_444490_600x600_fit_q90_lanczos.jpg"
						

						
					>
				</a>
			</div>
		
	
		
		
				
			
			
			
				
			

			
			
				
					
				
			


			
			
			
				
				
				
				
				
				
				
				
			

			
			


			<div>
				
				
					
				
				<a href="/posts/2022/01/raspberry-pi-cluster-mit-k3s/raspberry-pi-005.jpg" 
					class="galleryImg"
					
						

						

						
					
					>
					<img			
						width="450" height="600"

						
							src="/posts/2022/01/raspberry-pi-cluster-mit-k3s/raspberry-pi-005_hu7f8882d7b129638a807126d77a89def0_470144_600x600_fit_q90_lanczos.jpg"
						

						
							
						
					>
				</a>
			</div>
		
	
</div>
</div>

<script>
	if (!jQuery) {
		alert("jquery is not loaded");
	}

	$( document ).ready(() => {
		const gallery = $("#gallery-53019b3d45843050236ea504dabe72df-0");
		

		
		let swipeboxInstance = null;

		
		
		gallery.on('jg.complete', () => {
			

			swipeboxInstance = $('.galleryImg').swipebox(
				jQuery.extend({},
					{  }
				)
			);
		});

		
		gallery.justifiedGallery({
			rowHeight : "200",
			margins : "10",
			border : 0,
			waitThumbnailsLoad : false,
			lastRow : "justify",
			captions : false,
			
			
		});

		
		
	});
</script>

<p>Schon vor der Bestellung hatte ich mich für <a href="https://k3s.io/">k3s</a> (ein &ldquo;Lightweight Kubernetes&rdquo;) als Kubernetes Distribution entschieden, weil es zu ihr viele Infos gab und ich sie auf einem Raspberry Pi schon erfolgreich ausprobiert hatte.</p>
<p>Während der Einrichtung orientierte ich mich hauptsächlich am Blogpost <a href="https://blog.alexellis.io/test-drive-k3s-on-raspberry-pi/">&ldquo;Will it cluster? k3s on your Raspberry Pi&rdquo; von Alex Ellis</a>, welcher weiterhin eine gute Grundlage bieten sollte, auch wenn sich mittlerweile einige Details geändert haben. Zusätzlich würde ich noch den Blogpost <a href="https://anthonynsimon.com/blog/kubernetes-cluster-raspberry-pi/">&ldquo;Building a bare-metal Kubernetes cluster on Raspberry Pi&rdquo;</a> und die <a href="https://www.youtube.com/watch?v=kgVz4-SEhbE&amp;list=PL2_OBreMn7Frk57NLmLheAaSSpJLLL90G">Youtube Playlist von Jeff Geerling</a> zu seinem Raspberry Pi Cluster und Kubernetes empfehlen.</p>
<p>Demnächst werden weitere Posts über Raspberry Pi und k3s folgen. Beispielsweise zeige ich eine Alternative zu dem <a href="https://inlets.dev/">inlets</a> Tunnel, die ich via cloudflare und Argo Tunnel umgesetzt habe.</p>
]]></content></item><item><title>Happy New Year and Hello World!</title><link>https://gerrit.codes/posts/2022/01/happy-new-year-and-hello-world/</link><pubDate>Sat, 01 Jan 2022 14:00:00 +0100</pubDate><guid>https://gerrit.codes/posts/2022/01/happy-new-year-and-hello-world/</guid><description>Pünktlich zum Jahreswechsel startet dieses Blog. Hier will ich über kleine Projekte schreiben und es damit meinem zukünftigen Ich einfacher machen, sie wieder zu verstehen.
Da es beim Jahreswechsel 2021/2022 weder (meiner Meinung nach auch zum Glück) ausartende Feuerwerke noch eine große Feier gab, muss ein Foto vom neuen Macbook Pro 2021, welches das Macbook Air 2013 abgelöst hat, als Ersatz herhalten. Irgendwie auch passend.
Also&amp;hellip; Hello World! und Happy New Year!</description><content type="html"><![CDATA[<p>
























<img
  style='width: 12em; float:right'
  
  sizes="(min-width: 35em) 720px, 100vw"
  srcset='
  
    /img/hello-world_hu17ba274651b40fa094abf0fcfe642d0a_463280_500x0_resize_q75_box.jpg 500w
  
  
    , /img/hello-world_hu17ba274651b40fa094abf0fcfe642d0a_463280_800x0_resize_q75_box.jpg 800w
  
  
    , /img/hello-world_hu17ba274651b40fa094abf0fcfe642d0a_463280_1200x0_resize_q75_box.jpg 1200w
  '
  
    src="/img/hello-world.jpg"
  
  alt="">

 Pünktlich zum Jahreswechsel startet dieses Blog. Hier will ich über kleine Projekte schreiben und es damit meinem zukünftigen Ich einfacher machen, sie wieder zu verstehen.</p>
<p>Da es beim Jahreswechsel 2021/2022 weder (meiner Meinung nach auch zum Glück) ausartende Feuerwerke noch eine große Feier gab, muss ein Foto vom neuen Macbook Pro 2021, welches das Macbook Air 2013 abgelöst hat, als Ersatz herhalten. Irgendwie auch passend.</p>
<p>Also&hellip; <code>Hello World!</code> und <code>Happy New Year!</code></p>
<p>Weiteres zu mir und dem Blog unter <a href="https://gerrit.codes/about/">About</a></p>
]]></content></item></channel></rss>