<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on gerrit.codes</title><link>https://gerrit.codes/posts/</link><description>Recent content in Posts on gerrit.codes</description><generator>Hugo -- gohugo.io</generator><language>de-de</language><copyright>&lt;a href="https://creativecommons.org/licenses/by/4.0/" target="_blank" rel="noopener">CC BY 4.0&lt;/a></copyright><lastBuildDate>Tue, 03 Oct 2023 20:50:58 +0200</lastBuildDate><atom:link href="https://gerrit.codes/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Internet Monitoring (K8s+Grafana)</title><link>https://gerrit.codes/posts/2023/10/internet-monitoring-with-k8s-and-grafana/</link><pubDate>Tue, 03 Oct 2023 20:50:58 +0200</pubDate><guid>https://gerrit.codes/posts/2023/10/internet-monitoring-with-k8s-and-grafana/</guid><description>Motivation Nach dem Wechsel auf Glasfaser, hatte ich zwischendurch Ruckler beim Streaming. Das WLAN selbst war gut erreichbar. Das konnte ich mittels einer WLAN Analyzer App kontrollieren.
Die Daten zur Internetnutzung waren nicht ausreichend, um dort ein Problem feststellen zu k√∂nnen. Entsprechend habe ich selbst an einer L√∂sung gearbeitet, um die Internetgeschwindigkeit regelm√§√üig zu messen und sie visuell aufzubereiten.
Anforderungen Die Messung soll auf dem Raspberry Pi Kubernetes Cluster stattfinden, weil es 24/7 l√§uft.</description><content type="html"><![CDATA[<h2 id="motivation">Motivation</h2>
<p>Nach dem Wechsel auf Glasfaser, hatte ich zwischendurch Ruckler beim Streaming. Das WLAN selbst war gut erreichbar. Das konnte ich mittels einer WLAN Analyzer App kontrollieren.</p>
<p>Die Daten zur Internetnutzung waren nicht ausreichend, um dort ein Problem feststellen zu k√∂nnen. Entsprechend habe ich selbst an einer L√∂sung gearbeitet, um die Internetgeschwindigkeit regelm√§√üig zu messen und sie visuell aufzubereiten.</p>
<h2 id="anforderungen">Anforderungen</h2>
<ul>
<li>Die Messung soll auf dem <a href="/posts/2022/01/raspberry-pi-cluster-mit-k3s/">Raspberry Pi Kubernetes Cluster</a> stattfinden, weil es 24/7 l√§uft.</li>
<li>F√ºr die Auswertung und Anzeige soll Grafana genutzt werden, weil ich damit bereits l√§nger arbeite.</li>
<li>Ich wollte mich nicht selbst um die dauerhafte Speicherung k√ºmmern. Prima, dass die Grafana Cloud  einen umfangreichen Funktionsumfang kostenlos anbietet.</li>
</ul>
<h2 id="umsetzung">Umsetzung</h2>
<p>Ich bin relativ schnell auf <a href="https://github.com/jeanralphaviles/prometheus_speedtest">prometheus_speedtest</a> gesto√üen. Dabei handelt es sich um ein Python Package, welches Speedtest.net Ergebnisse als Prometheus Metrics Endpoints anbietet. Auch ein Container Image und passende K8s Manifests waren schon vorhanden.</p>
<p>Die K8s Manifests wurden nahezu komplett √ºbernommen und noch um einen Service hinzugef√ºgt. Danach wurde das Deploy und die Konfiguration des <a href="https://grafana.com/docs/agent/latest/">Grafana Agents</a> durchgef√ºhrt. In der <a href="https://github.com/gerrited/internet-monitoring/blob/main/configmap.yaml">configmap.yaml</a> m√ºssen die Daten der Grafana Cloud (URL, Username und Password) angepasst werden. Die Metriken werden fest von dem Kubernetes Service &ldquo;speedtest&rdquo; eingesammelt.</p>

























<img
  
  
  sizes="(min-width: 35em) 720px, 100vw"
  srcset='
  
    /img/008-grafana_huc84f0fe9ccdbb1feff626997a96b07f6_312877_500x0_resize_box_3.png 500w
  
  
    , /img/008-grafana_huc84f0fe9ccdbb1feff626997a96b07f6_312877_800x0_resize_box_3.png 800w
  
  
    , /img/008-grafana_huc84f0fe9ccdbb1feff626997a96b07f6_312877_1200x0_resize_box_3.png 1200w
  '
  
    src="/img/008-grafana.png"
  
  alt="">


<p>Die Daten werden in einem Grafana Dashboard angezeigt.</p>
<h2 id="weiteres">Weiteres</h2>
<p>In dem GitHub Repository <a href="https://github.com/gerrited/internet-monitoring">internet-monitoring</a> habe ich alle ben√∂tigten K8s Manifests und die Konfiguration des Grafana Agents und Dashboards als Vorlage ver√∂ffentlicht.</p>
]]></content></item><item><title>CoreDNS meldet i/o timeout - L√∂sung 42</title><link>https://gerrit.codes/posts/2023/09/kubernetes-coredns-io-timeout/</link><pubDate>Sun, 17 Sep 2023 11:19:05 +0200</pubDate><guid>https://gerrit.codes/posts/2023/09/kubernetes-coredns-io-timeout/</guid><description>Seit Kurzem nutzt die Infrastruktur des Raspberry Pi Kubernetes Clusters den Travel Router SFT1200 von GL.iNET. Dieser kann Internetzugriff via LAN, WLAN, Tethering und USB Modem f√ºr andere Ger√§te via LAN und WLAN bereitstellen. Um den Ersatz der SD-Karten der bisherigen Ger√§te zu vereinfachen, habe ich im Router statische DHCP-Eintr√§ge f√ºr die MAC-Adressen hinterlegt. Dabei dachte ich, es gut w√§re, wenn ich statt des Standardnetzes (Class C), mal etwas anderes nutze, damit ich die Netze intern gut unterscheiden kann.</description><content type="html"><![CDATA[<p>Seit Kurzem nutzt die Infrastruktur des <a href="/posts/2022/01/raspberry-pi-cluster-mit-k3s/">Raspberry Pi Kubernetes Clusters</a> den Travel Router SFT1200 von GL.iNET. Dieser kann Internetzugriff via LAN, WLAN, Tethering und USB Modem f√ºr andere Ger√§te via LAN und WLAN bereitstellen. Um den Ersatz der SD-Karten der bisherigen Ger√§te zu vereinfachen, habe ich im Router statische DHCP-Eintr√§ge f√ºr die MAC-Adressen hinterlegt. Dabei dachte ich, es gut w√§re, wenn ich statt des Standardnetzes (Class C), mal etwas anderes nutze, damit ich die Netze intern gut unterscheiden kann. Ich habe mich f√ºr Class A (konkret 10.42.42.0/24) entschieden und die Konfiguration der Nodes entsprechend ge√§ndert.</p>
<p>Allerdings traten im Anschluss seltsame Fehler auf. Beispielsweise konnte der Cloudflare Tunnel (siehe <a href="/posts/2022/01/k8s-tunnel-cloudflare/">Lokales Kubernetes im Internet verf√ºgbar</a>) keine Verbindung zum Internet mehr herstellen. Die Fehlermeldung half mir nicht direkt weiter und auch im Netz gab es im Kontext von <a href="https://github.com/cloudflare/cloudflared">cloudflared</a> (die f√ºr den Tunnel genutzte Software) keine L√∂sung.</p>
<p>Allerdings zeigte auch CoreDNS Probleme an, weshalb ich dort in die Logs schaute und folgendes fand:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>read udp 10.42.12.34:49738-&gt;10.42.42.1:53: i/o timeout
</span></span></code></pre></div><p>Es dauerte einen Moment, bis ich in der <a href="https://ranchermanager.docs.rancher.com/reference-guides/cluster-configuration/rancher-server-configuration/k3s-cluster-configuration#networking">Dokumentation von K3s</a> f√ºndig wurde. Die Leute bei Rancher scheinen auch Fans der 42 zu sein. Standardm√§√üig wird 10.42.0.0/16 f√ºr die IPs der Pods genutzt. Dadurch wurden die DNS-Anfragen an 10.42.42.1 nicht aus dem Kubernetes Cluster herausgegeben und intern konnten sie nicht beantwortet werden.</p>
<p>Ein √§rgerlicher Fehler, der sich aber ja schnell beheben lie√ü. Die Nodes verwenden jetzt 10.0.0.0/24 und die 42 bleibt K3s vorbehalten. üòâ</p>
]]></content></item><item><title>Unit-Tests f√ºr IoC Container</title><link>https://gerrit.codes/posts/2022/02/unit-tests-fuer-ioc-container/</link><pubDate>Sat, 12 Feb 2022 11:02:32 +0100</pubDate><guid>https://gerrit.codes/posts/2022/02/unit-tests-fuer-ioc-container/</guid><description>Das Problem Wenn f√ºr eine Anwendung Dependency Injection (DI) genutzt wird und ein Inversion of Control (IoC) Container wie Autofac zum Einsatz kommt, kann es schnell passieren, dass nicht alle ben√∂tigten Komponenten registriert werden. Die Abh√§ngigkeiten einer Klasse werden z.B. als Interface in den Constructor injiziert und fortan genutzt. W√§hrend der Entwicklung f√§llt dann nicht auf, dass die Abh√§ngigkeit nicht aufgel√∂st werden kann, aber sobald die Anwendung gestartet und genutzt wird, kommt es zu Fehlermeldungen, die oft zum Absturz der Anwendung f√ºhren.</description><content type="html"><![CDATA[
























<img
  
  
  sizes="(min-width: 35em) 720px, 100vw"
  srcset='
  
    /img/006-title_hu747ba16aad885dc8ae1305e9a8d11301_514828_500x0_resize_box_3.png 500w
  
  
    , /img/006-title_hu747ba16aad885dc8ae1305e9a8d11301_514828_800x0_resize_box_3.png 800w
  
  
    , /img/006-title_hu747ba16aad885dc8ae1305e9a8d11301_514828_1200x0_resize_box_3.png 1200w
  '
  
    src="/img/006-title.png"
  
  alt="">


<h2 id="das-problem">Das Problem</h2>
<p>Wenn f√ºr eine Anwendung <a href="https://martinfowler.com/articles/injection.html">Dependency Injection</a> (DI) genutzt wird und ein Inversion of Control (IoC) Container wie Autofac zum Einsatz kommt, kann es schnell passieren, dass nicht alle ben√∂tigten Komponenten registriert werden. Die Abh√§ngigkeiten einer Klasse werden z.B. als Interface in den Constructor injiziert und fortan genutzt. W√§hrend der Entwicklung f√§llt dann nicht auf, dass die Abh√§ngigkeit nicht aufgel√∂st werden kann, aber sobald die Anwendung gestartet und genutzt wird, kommt es zu Fehlermeldungen, die oft zum Absturz der Anwendung f√ºhren.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-plaintext" data-lang="plaintext"><span style="display:flex;"><span>Unhandled exception. Autofac.Core.Registration.ComponentNotRegisteredException: 
</span></span><span style="display:flex;"><span> The requested service &#39;ConsoleApp.Interfaces.ITextWriter&#39; has not been registered.
</span></span><span style="display:flex;"><span> To avoid this exception, either register a component to provide the service, check 
</span></span><span style="display:flex;"><span> for service registration using IsRegistered(), or use the ResolveOptional() method 
</span></span><span style="display:flex;"><span> to resolve an optional dependency.
</span></span><span style="display:flex;"><span>   at Autofac.ResolutionExtensions.ResolveService(IComponentContext context, Service service, IEnumerable`1 parameters)
</span></span><span style="display:flex;"><span>   at Autofac.ResolutionExtensions.Resolve(IComponentContext context, Type serviceType, IEnumerable`1 parameters)
</span></span><span style="display:flex;"><span>   at Autofac.ResolutionExtensions.Resolve[TService](IComponentContext context, IEnumerable`1 parameters)
</span></span><span style="display:flex;"><span>   at Autofac.ResolutionExtensions.Resolve[TService](IComponentContext context)
</span></span><span style="display:flex;"><span>   at Program.&lt;Main&gt;$(String[] args) in /Users/gerrit/Code/IocTests/src/ConsoleApp/Program.cs:line 7</span></span></code></pre></div>
<p>Um m√∂glichst schnell und automatisch (z.B. durch die CI/CD Pipelines) auf das Problem aufmerksam zu werden, sollte die IoC Konfiguration unter Test gestellt werden. In diesem Blogpost beziehe ich mich auf die M√∂glichkeiten von <a href="https://autofac.org/">Autofac</a>, aber das Vorgehen ist auch auf andere Packages wie <a href="https://docs.microsoft.com/en-us/dotnet/core/extensions/dependency-injection">Microsoft.Extensions.DependencyInjection</a> √ºbertragbar.</p>
<p>Eine Beispielanwendung inkl. Tests gibt es im GitHub Repo <a href="https://github.com/gerrited/IocTests">gerrited/IocTests</a>. Neben Autofac werden auch die Pakete <a href="https://nunit.org/">NUnit</a>, <a href="https://github.com/moq/moq4">Moq</a> und <a href="https://fluentassertions.com/">FluentAssertions</a> genutzt.</p>
<h2 id="ioc-konfiguration-testen">IoC Konfiguration testen</h2>
<p>Angenommen beim Programmstart soll das Interface <code>ITextWriter</code> aufgel√∂st werden und die registrierte Implementierung <code>ConsoleTextWriter</code> hat weitere Abh√§ngigkeiten (in diesem Fall zu <code>ITextGenerator</code>), die wiederum auch am IoC Container registriert sein m√ºssen.</p>

























<img
  
  
  sizes="(min-width: 35em) 720px, 100vw"
  srcset='
  
    /img/006-dependency-injection_hu05c3ebafe3cd11006d58e8f68786fbbe_55515_500x0_resize_box_3.png 500w
  
  
    , /img/006-dependency-injection_hu05c3ebafe3cd11006d58e8f68786fbbe_55515_800x0_resize_box_3.png 800w
  
  '
  
    src="/img/006-dependency-injection.png"
  
  alt="">


<p>In der <code>Program.cs</code> sieht es dann beispielsweise wie folgt aus.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> iocConfig = <span style="color:#66d9ef">new</span> IocConfig();
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> builder = iocConfig.GetBuilder();
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> container = builder.Build();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> writer = container.Resolve&lt;ITextWriter&gt;();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>writer.Write();</span></span></code></pre></div>
<p>Ein einfacher Test k√∂nnte genau diese Schritte durchf√ºhren und sicherstellen, dass es nicht zur Exception <code>ComponentNotRegisteredException</code> kommt.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Resolve_ITextWriter_NotThrowComponentNotRegisteredException()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> sut = CreateContainer();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> act = () =&gt; sut.Resolve&lt;ITextWriter&gt;();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    act.Should().NotThrow&lt;ComponentNotRegisteredException&gt;();
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div>
<p>Die Erzeugung des Containers im &ldquo;Arrange&rdquo;-Teil des Tests (siehe <a href="https://blog.ploeh.dk/2013/06/24/a-heuristic-for-formatting-code-according-to-the-aaa-pattern/">AAA Pattern</a>) findet in einer Factory Method statt, weil wir diesen Teil noch bei weiteren Tests brauchen werden. Anschlie√üend wird im &ldquo;Act&rdquo;, vergleichbar mit der Stelle beim Programmstart, das Interface <code>ITextWriter</code> aufgel√∂st. Im &ldquo;Assert&rdquo; stellen wir sicher, dass die Exception <code>ComponentNotRegisteredException</code> nicht geworfen wird. Mit diesem Test k√∂nnen wir bereits recht sicher sein, dass die Anwendung lauff√§hig ist.</p>
<p><a href="https://blog.cleancoder.com/uncle-bob/2017/12/18/Excuses.html">Unit Testing ist oft doppelte B√ºchf√ºhrung</a> und um sowohl die erfolgreiche Aufl√∂sung, als auch die Registrierung ansich zu pr√ºfen, kann alternativ oder zus√§tzlich der folgende Test genutzt werden.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#a6e22e">[Test]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Resolve_ITextWriter_ReturnConsoleTextWriter()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> sut = CreateContainer();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> result = sut.Resolve&lt;ITextWriter&gt;();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    result.Should().BeOfType&lt;ConsoleTextWriter&gt;();
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div>
<p>Statt auf die Exception, welche trotzdem geworfen wird, wenn <code>ITextWriter</code> oder eine Abh√§ngigkeit nicht aufgel√∂st werden kann, zu pr√ºfen, testen wir, ob es sich bei der aufgel√∂sten Klasse, um den richtigen Typ handelt. Dieser Test schl√§gt also auch fehl, wenn z.B. der Typ <code>FileTextWriter</code> statt <code>ConsoleTextWriter</code> registriert und dadurch aufgel√∂st wurde.</p>
<h2 id="umgang-mit-externen-ressourcen">Umgang mit externen Ressourcen</h2>
<p>Wenn externe Ressourcen wie Netzwerk, Datenbankverbindungen oder das Dateisystem genutzt werden, kann ein Test der IoC Konfiguration etwas schwieriger werden, weil w√§hrend des Tests die Datenbank nicht vorhanden oder der ben√∂tigte Server nicht erreichbar ist. Dann k√∂nnen simple <a href="https://martinfowler.com/bliki/TestDouble.html">Test Doubles</a> die eigentlichen Implementierungen ersetzen. Daf√ºr werden zus√§tzlich zu den tats√§chlichen Registrierungen, weitere f√ºr die jeweiligen Interfaces (z.B. <code>IDatabaseConnection</code> oder <code>IFileSystem</code>) durchgef√ºhrt. Damit sichergestellt werden kann, dass es die Typen auch ohne die Test Doubles aufgel√∂st werden k√∂nnen, sollten weitere Tests verwendet werden.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#a6e22e">[Test]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> IsRegistered_IDatabaseConnection()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> sut = CreateContainer();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> result = sut.IsRegistered&lt;IDatabaseConnection&gt;();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    result.Should().BeTrue();
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div>
<p>Durch <code>IsRegistered</code> wird der Typ nicht aufgel√∂st und es werden keine externen Ressourcen wie Datenbankverbindungen erstellt, was zu Fehlern wie &ldquo;Anmeldung fehlgeschlagen&rdquo; oder &ldquo;Server nicht gefunden&rdquo; f√ºhren k√∂nnte. Solche Tests sollten trotzdem vermieden werden, weil jetzt nicht sichergestellt werden kann, ob w√§hrend der Laufzeit auch alle Anh√§ngigkeiten der registrierten Implementierung von <code>IDatabaseConnection</code> aufgel√∂st werden k√∂nnen.</p>
<h2 id="sind-das-unit-tests">Sind das Unit-Tests?</h2>
<p>Ob es sich hierbei um Unit- oder Integrationstests handelt, ist (wie so h√§ufig) abh√§ngig von der individuellen Perspektive und Motivation. Getestet wird eine Komponente &ldquo;IoC Konfiguration&rdquo;. Au√üerdem k√∂nnen die Tests schnell und ohne weitere Konfiguration ausgef√ºhrt werden. Andererseits werden Abh√§ngigkeiten der Implementierungen aufgel√∂st, wodurch ganz eindeutig mehrere Klassen und Projekte am Test beteiligt sind. Ich pers√∂nlich bevorzuge grunds√§tzlich eine Aufteilung der Tests in Unit (eher schnell und ohne Konfiguration) und Integration (vermutlich eher langsam, evtl. ist eine Konfiguration n√∂tig oder es wird auf externe Ressourcen wie Dateien, Server und Datenbanken zugegriffen), wobei die Grenze bewusst unscharf bleibt.</p>
<h2 id="herausforderungen">Herausforderungen</h2>
<p>Die Tests werden deutlich schwieriger, wenn es keinen eindeutigen Einstiegspunkt, individuelle Lifetimescopes (z.B. pro API Request) oder weitere M√∂glichkeiten zum Aufl√∂sen von Abh√§ngigkeiten (z.B. einen Service Locater mit einer anderen IoC Konfiguration) gibt. Auf solche fiesen Komplexit√§tsverst√§rker versuche ich aber sowieso m√∂glichst zu verzichten.</p>
<p>Au√üerdem wird die Aussagekraft von Tests verringert, wenn viele Registrierungen aufgrund von externen Ressourcen durch Test Doubles ersetzt werden m√ºssen, weil die wirklichen Abh√§ngigkeiten dann erst zur Laufzeit aufgel√∂st werden. Deshalb sollte sich die Anzahl der zus√§tzlich registrierten Test Doubles auf ein Minimum beschr√§nken.</p>
<h2 id="fazit">Fazit</h2>
<p>Anders als <a href="https://twitter.com/ploeh">Mark Seemann</a>, dessen neues Buch &ldquo;Code That Fits in Your Head&rdquo; ich aktuell jedem empfehle kann, in seinem Blogpost <a href="https://blog.ploeh.dk/2011/12/21/TestingContainerConfigurations/">&ldquo;Testing Container Configurations&rdquo;</a>, bin ich der Meinung, dass die aufgef√ºhrten Tests, vor allem bei gr√∂√üeren Anwendungen, bei denen Abh√§ngigkeiten oft undurchsichtig werden, die Entwicklung erleichtern k√∂nnen, weil der Feedback Loop deutlich k√ºrzer wird, denn die Tests sollten sp√§testens nach jedem Commit von der CI/CD Pipeline ausgef√ºhrt werden. Meistens reichen bereits wenige Testf√§lle aus, um recht zuverl√§ssig testen zu k√∂nnen, dass es w√§hrend der Laufzeit keine Probleme beim Aufl√∂sen der Abh√§ngigkeiten geben wird. Auf System- oder Smoke-Tests sollte trotzdem nicht verzichtet werden. Ein Nachteil ist, dass die Tests f√ºr jede Anwendung erneut geschrieben werden m√ºssen. Das sollte dann aber bestenfalls einer der ersten Schritte sein, wenn nach <a href="http://blog.cleancoder.com/uncle-bob/2013/03/06/ThePragmaticsOfTDD.html">Test Driven Development</a> gearbeitet wird.</p>
<p>Auf das Testen einzelner <a href="https://autofac.readthedocs.io/en/latest/configuration/modules.html">Module</a>, welche beispielsweise f√ºr Zusammenstellungen der einzelnen Komponenten eines Pakets genutzt werden, sollte verzichtet werden, weil die Komposition der Abh√§ngigkeiten erst in der IoC Konfiguration der Anwendung festgelegt wird und es dadurch sehr wahrscheinlich vorkommen kann, dass nicht alle Abh√§ngigkeiten eines einzelnen Moduls aufgel√∂st werden k√∂nnen.</p>
]]></content></item><item><title>Lokales K8s im Internet verf√ºgbar</title><link>https://gerrit.codes/posts/2022/01/k8s-tunnel-cloudflare/</link><pubDate>Sun, 30 Jan 2022 15:24:11 +0100</pubDate><guid>https://gerrit.codes/posts/2022/01/k8s-tunnel-cloudflare/</guid><description>Vorbereitungen Cloudflare bietet seit 2021 (siehe A Boring Announcement: Free Tunnels for Everyone) kostenlose Tunnels an. Damit k√∂nnen lokale Websites im Internet verf√ºgbar gemacht werden. Ben√∂tigt wird nur eine Domain, bei der Cloudflare als Nameserver hinterlegt ist. Wie das genau geht, ist unter &amp;ldquo;Set up your first tunnel&amp;rdquo; beschrieben.
Tunnel f√ºr Services im Kubernetes Cluster Erstellte Tunnel k√∂nnen auch f√ºr Services in einem Kubernetes Cluster genutzt werden. Eine Anleitung mit Beispiel gibt es in meinem Fork von cloudflare/argo-tunnel-examples.</description><content type="html"><![CDATA[
























<img
  
  
  sizes="(min-width: 35em) 720px, 100vw"
  srcset='
  
    /img/k3s-cloudflared_hube56a73c1754b9451fc639bfac136570_121211_500x0_resize_box_3.png 500w
  
  
    , /img/k3s-cloudflared_hube56a73c1754b9451fc639bfac136570_121211_800x0_resize_box_3.png 800w
  
  
    , /img/k3s-cloudflared_hube56a73c1754b9451fc639bfac136570_121211_1200x0_resize_box_3.png 1200w
  '
  
    src="/img/k3s-cloudflared.png"
  
  alt="">


<h2 id="vorbereitungen">Vorbereitungen</h2>
<p>Cloudflare bietet seit 2021 (siehe <a href="https://blog.cloudflare.com/tunnel-for-everyone/">A Boring Announcement: Free Tunnels for Everyone</a>) kostenlose Tunnels an. Damit k√∂nnen lokale Websites im Internet verf√ºgbar gemacht werden. Ben√∂tigt wird nur eine Domain, bei der Cloudflare als Nameserver hinterlegt ist. Wie das genau geht, ist unter <a href="https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/install-and-setup/tunnel-guide">&ldquo;Set up your first tunnel&rdquo;</a> beschrieben.</p>
<h2 id="tunnel-f√ºr-services-im-kubernetes-cluster">Tunnel f√ºr Services im Kubernetes Cluster</h2>
<p>Erstellte Tunnel k√∂nnen auch f√ºr Services in einem Kubernetes Cluster genutzt werden. Eine Anleitung mit Beispiel gibt es in <a href="https://github.com/gerrited/argo-tunnel-examples/tree/master/named-tunnel-k8s">meinem Fork von cloudflare/argo-tunnel-examples</a>. Im dortigen Kubernetes Manifest <a href="https://github.com/gerrited/argo-tunnel-examples/blob/master/named-tunnel-k8s/cloudflared.yaml">&ldquo;cloudflared.yml&rdquo;</a> habe ich, im Vergleich zum Original, das Container Image von <a href="https://hub.docker.com/r/cloudflare/cloudflared/tags">cloudflare/cloudflared</a> auf <a href="https://hub.docker.com/r/erisamoe/cloudflared/tags">erisamoe/cloudflared</a> ge√§ndert, damit das Deployment auch auf arm64 (also z.B. auf einem Raspberry Pi und somit auch im <a href="/posts/2022/01/raspberry-pi-cluster-mit-k3s/">Raspberry Pi Kubernetes Cluster</a>) und nicht nur auf amd64 funktioniert.</p>
<p>Nachdem das Deployment angepasst und erfolgreich durchgef√ºhrt wurde, ist der Service unter der gew√§hlten Domain erreichbar und die Last wird automatisch auf alle Pods des Services verteilt. Da Cloudflare als TLS termination proxy genutzt wird, ist auch https m√∂glich. Dadurch kann der Traffic bei Cloudflare nat√ºrlich unverschl√ºsselt gelesen werden. Entsprechend ist diese L√∂sung vielleicht nicht oder nur bedingt f√ºr produktive Umgebung geeignet.</p>
<h2 id="alternativen">Alternativen</h2>
<p>Auch <a href="https://inlets.dev/">inlets</a> von <a href="https://www.alexellis.io/">Alex Ellis</a> kann als Tunnel genutzt werden. Angefangen mit einer kostenlosen Option, hat Inlets 2021 in einem <a href="https://inlets.dev/blog/2021/07/27/monthly-subscription.html">Blogpost</a> bekanntgegeben, dass sie jetzt eine monatliche Subscription anbieten. Das Projekt sollte man sich auf jeden Fall genauer anschauen, wenn auf Cloudflare verzichtet werden soll.</p>
]]></content></item><item><title>Bloggen mit Hugo und GitHub Pages</title><link>https://gerrit.codes/posts/2022/01/bloggen-mit-hugo-und-github-pages/</link><pubDate>Sat, 15 Jan 2022 22:02:31 +0100</pubDate><guid>https://gerrit.codes/posts/2022/01/bloggen-mit-hugo-und-github-pages/</guid><description>Plattform Eigentlich habe ich mich recht schnell f√ºr Hugo als Framework f√ºr das neue Blog entschieden. Davor hatte ich damit keinen Kontakt, aber Dokumentation und Community machten einen guten Eindruck auf mich. Au√üerdem waren andere Blogs und Websites, die auf Hugo basierte, simple, schnell und modern.
Theme Das Theme hello-friend-ng habe ich (einfach und etwas langweilig) unter den Themes auf der offiziellen Hugo Website gefunden. Der Entwickler Djordje Atlialp nutzt es selbst f√ºr seinen Blog und ich bin bisher zufrieden mit dem Look und den integrierten Funktionen.</description><content type="html"><![CDATA[<h2 id="plattform">Plattform</h2>

























<img
  
  
  sizes="(min-width: 35em) 720px, 100vw"
  srcset='
  
    /img/hugo-website_huf138cfa89d09395479777d48afb1e9f0_326811_500x0_resize_box_3.png 500w
  
  
    , /img/hugo-website_huf138cfa89d09395479777d48afb1e9f0_326811_800x0_resize_box_3.png 800w
  
  
    , /img/hugo-website_huf138cfa89d09395479777d48afb1e9f0_326811_1200x0_resize_box_3.png 1200w
  '
  
    src="/img/hugo-website.png"
  
  alt="">


<p>Eigentlich habe ich mich recht schnell f√ºr <a href="https://gohugo.io/" title="Hugo">Hugo</a> als Framework f√ºr das neue Blog entschieden. Davor hatte ich damit keinen Kontakt, aber Dokumentation und Community machten einen guten Eindruck auf mich. Au√üerdem waren andere Blogs und Websites, die auf Hugo basierte, simple, schnell und modern.</p>
<h2 id="theme">Theme</h2>
<p>Das Theme <a href="https://github.com/rhazdon/hugo-theme-hello-friend-ng" title="Hugo Theme hello-friend-ng">hello-friend-ng</a> habe ich (einfach und etwas langweilig) unter den Themes auf der <a href="https://themes.gohugo.io/">offiziellen Hugo Website</a> gefunden. Der Entwickler <a href="https://github.com/rhazdon">Djordje Atlialp</a> nutzt es selbst f√ºr seinen Blog und ich bin bisher zufrieden mit dem Look und den integrierten Funktionen.</p>
<h2 id="erweiterungen">Erweiterungen</h2>
<p>Zus√§tzlich zu den Grundfunktionen des Themes, nutze ich noch <a href="https://github.com/mfg92/hugo-shortcode-gallery">hugo-shortcode-gallery</a> f√ºr Fotogallerien (z.B. im Blog Post √ºber das <a href="/posts/2022/01/raspberry-pi-cluster-mit-k3s/">Raspberry Pi Kubernetes Cluster</a>) und <a href="https://github.com/martignoni/hugo-notice">hugo-notice</a>, falls ich optisch auffallende Anmerkungen einf√ºgen will.</p>
<p>Bei <code>hugo-shortcode-gallery</code> hat das Einrichten allerdings fast 2 Stunden gedauert, weil die Erweiterung jQuery voraussetzt, aber das Theme <code>hello-friend-ng</code> ohne auskommt. Letztendlich bin ich erst durch ein <a href="https://github.com/mfg92/hugo-shortcode-gallery/issues/32">Issue bei GitHub</a> auf die Option <code>loadJQuery</code> aufmerksam gemacht worden. Nur so als Tipp, falls ihr die Kombination aus dem Theme und der Erweiterung auch nutzen wollt. üòâ</p>
<h2 id="hosting">Hosting</h2>

























<img
  
  
  sizes="(min-width: 35em) 720px, 100vw"
  srcset='
  
    /img/github.io-commits_hu8e2bfd563793b7fe31a15998c2fdbeef_980871_500x0_resize_box_3.png 500w
  
  
    , /img/github.io-commits_hu8e2bfd563793b7fe31a15998c2fdbeef_980871_800x0_resize_box_3.png 800w
  
  
    , /img/github.io-commits_hu8e2bfd563793b7fe31a15998c2fdbeef_980871_1200x0_resize_box_3.png 1200w
  '
  
    src="/img/github.io-commits.png"
  
  alt="">


<p>Das Blog wird bei GitHub Pages (<a href="https://github.com/gerrited/gerrited.github.io">Repo</a>) gehostet. Allerdings liegen die eigentlichen Quelldateien (Markdown, Bilder, Konfiguration, etc.) in einem anderen, privaten Repository, damit Entw√ºrfe, Konfiguration und die Originalfotos (inkl. EXIF-Daten) nicht √∂ffentlich sind. Ich habe mich bei der Einrichtung an dieser <a href="https://ruddra.com/hugo-deploy-static-page-using-github-actions/">Anleitung</a> orientiert.</p>
<h2 id="status">Status</h2>
<p>Auf der separaten <a href="https://status.g11s.cc">Status Page</a> wird die Erreichbarkeit und Geschwindigkeit des Blogs regelm√§√üig durch <a href="https://github.com/upptime/upptime">upptime</a> gepr√ºft. Daf√ºr habe ich einfach ein eigenes <a href="https://github.com/gerrited/upptime">Repo</a> anhand des upptime Templates erstellt. Weiteres ist in dem <a href="https://upptime.js.org/docs/get-started/">Getting started</a> beschrieben. Au√üerdem habe ich f√ºr die Status Badges einen kleinen Shortcode geschrieben.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">style</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;display: flex&#34;</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">style</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;margin-right:0.5em&#34;</span>&gt;&lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://g11s.cc/upptime/history/blog&#34;</span>&gt;&lt;<span style="color:#f92672">img</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fgerrited%2Fupptime%2Fmaster%2Fapi%2Fblog%2Fuptime.json&#34;</span> /&gt;&lt;/<span style="color:#f92672">a</span>&gt;&lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">div</span>&gt;&lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://g11s.cc/upptime/history/blog&#34;</span>&gt;&lt;<span style="color:#f92672">img</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fgerrited%2Fupptime%2Fmaster%2Fapi%2Fblog%2Fresponse-time.json&#34;</span> /&gt;&lt;/<span style="color:#f92672">a</span>&gt;&lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">div</span>&gt;
</span></span></code></pre></div><p><strong>Demo</strong>
<div style="display: flex">
    <div style="margin-right:0.5em"><a href="https://status.g11s.cc/history/blog"><img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fgerrited%2Fupptime%2Fmaster%2Fapi%2Fblog%2Fuptime.json" /></a></div>
    <div><a href="https://status.g11s.cc/history/blog"><img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fgerrited%2Fupptime%2Fmaster%2Fapi%2Fblog%2Fresponse-time.json" /></a></div>
</div></p>
<p>Die Verweise in den Links und Bildern sind hartkodiert und m√ºssten ausgetaucht werden, solltet ihr den Shortcode f√ºr eure Website nutzen wollen. Wenn der Code unter /layouts/shortcodes/upptime.html gespeichert wird, kann er folgenderma√üen in Markdown eingef√ºgt werden.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-markdown" data-lang="markdown"><span style="display:flex;"><span>{{&lt; <span style="color:#f92672">upptime</span> &gt;}}
</span></span></code></pre></div><h2 id="ablauf">Ablauf</h2>
<p>Meistens teste die die √Ñnderungen lokal (via <code>hugo server -D</code>) und pushe sie erst, wenn ich mit dem Ergebnis zufrieden bin. Danach wird die √∂ffentliche Website innerhalb weniger Sekunden durch die konfigurierte GitHub Action aktualisiert.</p>
<p>Von unterwegs k√∂nnen kleinere Anpassungen auch √ºber die GitHub Weboberfl√§che vorgenommen werden. Allerdings ist der Editor daf√ºr nur mittelm√§√üig geeignet und es gibt keine Vorschau der √Ñnderungen.</p>
<h2 id="fazit">Fazit</h2>
<p>Aktuell bin ich recht zufrieden mit dem Stack und Ablauf. Einiges ist etwas fummeliger als beim einem gr√∂√üeren System wie z.B. Wordpress, mit dem ich seit √ºber 10 Jahren regelm√§√üig arbeite. Aber genau wegen des anderen Ansatzes, der Leichtgewichtigkeit und ein wenig Extraarbeit, habe ich mich auf die Suche nach einer anderen L√∂sung gemacht. Und vermutlich gehen die meisten Sachen in ein paar Wochen deutlich leichter von der Hand.</p>
]]></content></item><item><title>K8s Deployment visualisieren</title><link>https://gerrit.codes/posts/2022/01/k8s-deployment-visualisieren/</link><pubDate>Mon, 10 Jan 2022 07:24:32 +0100</pubDate><guid>https://gerrit.codes/posts/2022/01/k8s-deployment-visualisieren/</guid><description>Intro Um Deployments eines Kubernetes Clusters zu visualisieren, habe ich mir Pimoroni Blinkt LED Strips gekauft und sie auf die GPIO-Slots der RPi des Clusters gesteckt.
Demo Details Durch blinkt-controller wird ein Daemonset erstellt, welches auf die Labels blinkt und blinktColor von Pods reagiert. Damit die LEDs angesteuert werden k√∂nnen, laufen die Pods als cluster-admin. Weiteres unter &amp;ldquo;How it works&amp;rdquo; auf GitHub.
Vorbereitung In dem Video ist der Controller bereits eingerichtet.</description><content type="html"><![CDATA[<h2 id="intro">Intro</h2>
<p>Um Deployments eines Kubernetes Clusters zu visualisieren, habe ich mir <a href="https://learn.pimoroni.com/article/getting-started-with-blinkt">Pimoroni Blinkt</a> LED Strips gekauft und sie auf die GPIO-Slots der RPi des Clusters gesteckt.</p>
<h2 id="demo">Demo</h2>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube-nocookie.com/embed/U6AsAn490-4" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<h2 id="details">Details</h2>
<p>Durch <a href="https://github.com/gerrited/blinkt-k8s-controller">blinkt-controller</a> wird ein <a href="https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/">Daemonset</a> erstellt, welches auf die Labels <code>blinkt</code> und <code>blinktColor</code> von Pods reagiert. Damit die LEDs angesteuert werden k√∂nnen, laufen die Pods als cluster-admin. Weiteres unter <a href="https://github.com/gerrited/blinkt-k8s-controller#how-it-works">&ldquo;How it works&rdquo;</a> auf GitHub.</p>
<h2 id="vorbereitung">Vorbereitung</h2>
<p>In dem Video ist der Controller bereits eingerichtet. Zus√§tzlich verwende ich diese beiden Manifests:</p>
<script type="application/javascript" src="https://gist.github.com/gerrited/c9691d8dc4be346038c5f4908a9a2adf.js"></script>

<h2 id="ablauf">Ablauf</h2>
<h3 id="deploy">Deploy</h3>
<p>Zuerst wird das Deployment &ldquo;green&rdquo; durchgef√ºhrt. Dadurch werden die 16 gr√ºnen Pods gleichm√§√üig auf die 4 Nodes verteilt.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl apply -f hello-blinkt-controller-green.yml</span></span></code></pre></div>
<p>Der Vorgang des Deployments kann jedes Mal mit folgenden Befehl beobachtet werden.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl rollout status deployment/hello-blinkt</span></span></code></pre></div>
<h3 id="update">Update</h3>
<p>Sobald das Deployment erfolgreich war, wird das Deployment auf &ldquo;blue&rdquo; ge√§ndert. Kubernetes pr√ºft dann erstmal vorsichtig, ob das Deployment in Ordnung ist. In dieser √úbergangsphase sind sowohl gr√ºne als auch blaue Pods aktiv. Wenn die neue Version des Deployments erfolgreich gepr√ºft wurde, ersetzen weitere blaue Pods die alten gr√ºnen Pods.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl apply -f hello-blinkt-controller-blue.yml</span></span></code></pre></div>
<h3 id="delete">Delete</h3>
<p>Anschlie√üend wird das Deployment gel√∂scht. Auch hier geht K8s schrittweise vor und entfernt nacheinander die einzelnen Pods.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl delete -f hello-blinkt-controller-blue.yml</span></span></code></pre></div>
<h2 id="fazit">Fazit</h2>
<p>Durch die LEDs und die unterschiedlichen Farben, ist der Vorgang meiner Meinung nach deutlich greifbarer, als z.B. in Lens und damit gerade f√ºr kleine Kubernetes 101 Sessions geeignet.</p>
]]></content></item><item><title>Raspberry Pi Cluster mit k3s</title><link>https://gerrit.codes/posts/2022/01/raspberry-pi-cluster-mit-k3s/</link><pubDate>Sat, 08 Jan 2022 18:37:38 +0100</pubDate><guid>https://gerrit.codes/posts/2022/01/raspberry-pi-cluster-mit-k3s/</guid><description>Um mich auf einer Art Spielwiese mit Kubernetes auseinandersetzen zu k√∂nnen, habe ich Anfang 2020 folgendes bestellt:
4 x Raspberry Pi 4 B (4x 1,5 GHz, 2 GB RAM) 4 x SanDisk Ultra MicroSDHC 32GB RPI CASE TR 19 (transparentes Geh√§use f√ºr mehrere Raspberry Pi) TP-Link 5-Port Gigabit Switch Anker USB-Ladeger√§t PowerPort+, 5 V, 2400 mA, 5 USB-Ports diverse USB und LAN Kabel Weitere Produktinformationen k√∂nnen bei den √ºblichen Shops gefunden werden.</description><content type="html"><![CDATA[<p>Um mich auf einer Art Spielwiese mit Kubernetes auseinandersetzen zu k√∂nnen, habe ich Anfang 2020 folgendes bestellt:</p>
<ul>
<li>4 x Raspberry Pi 4 B (4x 1,5 GHz, 2 GB RAM)</li>
<li>4 x  SanDisk Ultra MicroSDHC 32GB</li>
<li>RPI CASE TR 19 (transparentes Geh√§use f√ºr mehrere Raspberry Pi)</li>
<li>TP-Link 5-Port Gigabit Switch</li>
<li>Anker USB-Ladeger√§t PowerPort+, 5 V, 2400 mA, 5 USB-Ports</li>
<li>diverse USB und LAN Kabel</li>
</ul>
<p>Weitere Produktinformationen k√∂nnen bei den √ºblichen Shops gefunden werden. Der Gesamtpreis belief sich auf ca. 300‚Ç¨.</p>




	


































  	
	

	
		<script src="/shortcode-gallery/jquery-3.6.0.min.js"></script>
	
	
	

	<script src="/shortcode-gallery/swipebox/js/jquery.swipebox.min.js"></script>
	<link rel="stylesheet" href="/shortcode-gallery/swipebox/css/swipebox.min.css">

	<script src="/shortcode-gallery/justified_gallery/jquery.justifiedGallery.min.js"></script>
	<link rel="stylesheet" href="/shortcode-gallery/justified_gallery/justifiedGallery.min.css"/>


<style>
	

	
</style>





<div id="gallery-53019b3d45843050236ea504dabe72df-0-wrapper" class="gallery-wrapper">
<div id="gallery-53019b3d45843050236ea504dabe72df-0" class="justified-gallery">
	
		
		
				
			
			
			
				
			

			
			
				
			


			
			
			

			
			


			<div>
				
				
					
				
				<a href="/posts/2022/01/raspberry-pi-cluster-mit-k3s/raspberry-pi-001.jpg" 
					class="galleryImg"
					
					>
					<img			
						width="600" height="450"

						
							src="/posts/2022/01/raspberry-pi-cluster-mit-k3s/raspberry-pi-001_hud16d612c330b04dcdb106e49d4a31f27_597464_600x600_fit_q90_lanczos.jpg"
						

						
					>
				</a>
			</div>
		
	
		
		
				
			
			
			
				
			

			
			
				
			


			
			
			

			
			


			<div>
				
				
					
				
				<a href="/posts/2022/01/raspberry-pi-cluster-mit-k3s/raspberry-pi-002.jpg" 
					class="galleryImg"
					
					>
					<img			
						width="600" height="450"

						
							src="/posts/2022/01/raspberry-pi-cluster-mit-k3s/raspberry-pi-002_hu5ac38d9ac6a6b34ee8299118fdb62090_543435_600x600_fit_q90_lanczos.jpg"
						

						
					>
				</a>
			</div>
		
	
		
		
				
			
			
			
				
			

			
			
				
			


			
			
			

			
			


			<div>
				
				
					
				
				<a href="/posts/2022/01/raspberry-pi-cluster-mit-k3s/raspberry-pi-003.jpg" 
					class="galleryImg"
					
					>
					<img			
						width="450" height="600"

						
							src="/posts/2022/01/raspberry-pi-cluster-mit-k3s/raspberry-pi-003_hua080a8dbf0a1f20d00daec3557c205a9_525255_600x600_fit_q90_lanczos.jpg"
						

						
					>
				</a>
			</div>
		
	
		
		
				
			
			
			
				
			

			
			
				
			


			
			
			

			
			


			<div>
				
				
					
				
				<a href="/posts/2022/01/raspberry-pi-cluster-mit-k3s/raspberry-pi-004.jpg" 
					class="galleryImg"
					
					>
					<img			
						width="450" height="600"

						
							src="/posts/2022/01/raspberry-pi-cluster-mit-k3s/raspberry-pi-004_huda82d5597805dd095113ffbad5b0b7bf_444490_600x600_fit_q90_lanczos.jpg"
						

						
					>
				</a>
			</div>
		
	
		
		
				
			
			
			
				
			

			
			
				
					
				
			


			
			
			
				
				
				
				
				
				
				
				
			

			
			


			<div>
				
				
					
				
				<a href="/posts/2022/01/raspberry-pi-cluster-mit-k3s/raspberry-pi-005.jpg" 
					class="galleryImg"
					
						

						

						
					
					>
					<img			
						width="450" height="600"

						
							src="/posts/2022/01/raspberry-pi-cluster-mit-k3s/raspberry-pi-005_hu7f8882d7b129638a807126d77a89def0_470144_600x600_fit_q90_lanczos.jpg"
						

						
							
						
					>
				</a>
			</div>
		
	
</div>
</div>

<script>
	if (!jQuery) {
		alert("jquery is not loaded");
	}

	$( document ).ready(() => {
		const gallery = $("#gallery-53019b3d45843050236ea504dabe72df-0");
		

		
		let swipeboxInstance = null;

		
		
		gallery.on('jg.complete', () => {
			

			swipeboxInstance = $('.galleryImg').swipebox(
				jQuery.extend({},
					{  }
				)
			);
		});

		
		gallery.justifiedGallery({
			rowHeight : "200",
			margins : "10",
			border : 0,
			waitThumbnailsLoad : false,
			lastRow : "justify",
			captions : false,
			
			
		});

		
		
	});
</script>

<p>Schon vor der Bestellung hatte ich mich f√ºr <a href="https://k3s.io/">k3s</a> (ein &ldquo;Lightweight Kubernetes&rdquo;) als Kubernetes Distribution entschieden, weil es zu ihr viele Infos gab und ich sie auf einem Raspberry Pi schon erfolgreich ausprobiert hatte.</p>
<p>W√§hrend der Einrichtung orientierte ich mich haupts√§chlich am Blogpost <a href="https://blog.alexellis.io/test-drive-k3s-on-raspberry-pi/">&ldquo;Will it cluster? k3s on your Raspberry Pi&rdquo; von Alex Ellis</a>, welcher weiterhin eine gute Grundlage bieten sollte, auch wenn sich mittlerweile einige Details ge√§ndert haben. Zus√§tzlich w√ºrde ich noch den Blogpost <a href="https://anthonynsimon.com/blog/kubernetes-cluster-raspberry-pi/">&ldquo;Building a bare-metal Kubernetes cluster on Raspberry Pi&rdquo;</a> und die <a href="https://www.youtube.com/watch?v=kgVz4-SEhbE&amp;list=PL2_OBreMn7Frk57NLmLheAaSSpJLLL90G">Youtube Playlist von Jeff Geerling</a> zu seinem Raspberry Pi Cluster und Kubernetes empfehlen.</p>
<p>Demn√§chst werden weitere Posts √ºber Raspberry Pi und k3s folgen. Beispielsweise zeige ich eine Alternative zu dem <a href="https://inlets.dev/">inlets</a> Tunnel, die ich via cloudflare und Argo Tunnel umgesetzt habe.</p>
]]></content></item><item><title>Happy New Year and Hello World!</title><link>https://gerrit.codes/posts/2022/01/happy-new-year-and-hello-world/</link><pubDate>Sat, 01 Jan 2022 14:00:00 +0100</pubDate><guid>https://gerrit.codes/posts/2022/01/happy-new-year-and-hello-world/</guid><description>P√ºnktlich zum Jahreswechsel startet dieses Blog. Hier will ich √ºber kleine Projekte schreiben und es damit meinem zuk√ºnftigen Ich einfacher machen, sie wieder zu verstehen.
Da es beim Jahreswechsel 2021/2022 weder (meiner Meinung nach auch zum Gl√ºck) ausartende Feuerwerke noch eine gro√üe Feier gab, muss ein Foto vom neuen Macbook Pro 2021, welches das Macbook Air 2013 abgel√∂st hat, als Ersatz herhalten. Irgendwie auch passend.
Also&amp;hellip; Hello World! und Happy New Year!</description><content type="html"><![CDATA[<p>
























<img
  style='width: 12em; float:right'
  
  sizes="(min-width: 35em) 720px, 100vw"
  srcset='
  
    /img/hello-world_hu17ba274651b40fa094abf0fcfe642d0a_463280_500x0_resize_q80_box.jpg 500w
  
  
    , /img/hello-world_hu17ba274651b40fa094abf0fcfe642d0a_463280_800x0_resize_q80_box.jpg 800w
  
  
    , /img/hello-world_hu17ba274651b40fa094abf0fcfe642d0a_463280_1200x0_resize_q80_box.jpg 1200w
  '
  
    src="/img/hello-world.jpg"
  
  alt="">

 P√ºnktlich zum Jahreswechsel startet dieses Blog. Hier will ich √ºber kleine Projekte schreiben und es damit meinem zuk√ºnftigen Ich einfacher machen, sie wieder zu verstehen.</p>
<p>Da es beim Jahreswechsel 2021/2022 weder (meiner Meinung nach auch zum Gl√ºck) ausartende Feuerwerke noch eine gro√üe Feier gab, muss ein Foto vom neuen Macbook Pro 2021, welches das Macbook Air 2013 abgel√∂st hat, als Ersatz herhalten. Irgendwie auch passend.</p>
<p>Also&hellip; <code>Hello World!</code> und <code>Happy New Year!</code></p>
<p>Weiteres zu mir und dem Blog unter <a href="https://gerrit.codes/about/">About</a></p>
]]></content></item></channel></rss>